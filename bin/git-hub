#!/usr/bin/env bash

################################################################################
# name: git-hub
# what: control your github.com (or enterprise) repo from the command-line
################################################################################
# copyright (c) 2012 Wil Moore III <wil.moore@wilmoore.com>

################################################################################
# "Be conservative in what you do; be liberal in which you accept from others."
################################################################################

set -e
set -o errexit
set -o errtrace

################################################################################
# command-line options
################################################################################

LONG_USAGE='control your github.com (or enterprise) repo from the command-line.'
OPTIONS_SPEC="\
git hub <command>
git hub [-f | --force-origin] <command>

COMMANDS

contributors          go to contributors list.
issues                go to issue tracker.
open                  open the github repo page in your default web browser.
pages                 open the github pages url in your default web browser.
pull-request          new pull request from current branch.
stargazers            go to stargazers list.
wiki                  go to wiki pages.

OPTIONS
--
f,force-origin  force the use of 'origin' rather than 'upstream'.
"

################################################################################
# NOT RECOMMENDED TO MODIFY UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING!
################################################################################

# program version
VERSION=0.0.8

# run from a subdirectory
SUBDIRECTORY_OK=Yes

################################################################################
# bootstrap
################################################################################

. git-sh-setup
. git-sh-i18n

require_work_tree_exists

CURRENT_BRANCH=$(git name-rev --name-only HEAD)

# force use of origin remote?
for opt; do
  case "$opt" in
    -f|--force-origin)
      FORCE_ORIGIN=1
      shift
      break
      ;;
    *)
      FORCE_ORIGIN=0
      break
      ;;
  esac
done

################################################################################
# parameter handling
################################################################################

shift

################################################################################
# helpers
################################################################################

github_domain(){
  local url=$(git config --get remote.origin.url)

  if [[ $(echo $url | grep '@') ]]; then
    echo $url | awk -F: '{print $1}' | awk -F@ '{print $NF}'
  else
    echo $url | awk -F/ '{print $3}'
  fi
}

upstream_url() {
  local url=$(git config --get remote.upstream.url)

  if [[ $(echo $url | grep '@') ]]; then
    echo $url | tr ':' '/' | sed -e 's@.git$@@' -e 's/^[^@]*@//'
  else
    echo $url | sed -e 's@\.git@@g' -e 's@https://@@g' -e 's@http://@@g'
  fi
}

origin_url() {
  local url=$(git config --get remote.origin.url)

  if [[ $(echo $url | grep '@') ]]; then
    echo $url | tr ':' '/' | sed -e 's@.git$@@' -e 's/^[^@]*@//'
  else
    echo $url | sed -e 's@\.git@@g' -e 's@https://@@g' -e 's@http://@@g'
  fi
}

upstream_or_origin() {
  if [ ! -z "$(upstream_url)" ]; then
    echo $(upstream_url)
  else
    echo $(origin_url)
  fi
}

repo_user() {
  git config --get remote.origin.url | awk -F: '{print $2}' | awk -F/ '{print $1}'
}

repo_name() {
  git config --get remote.origin.url | awk -F: '{print $2}' | awk -F/ '{print $2}' | awk -F. '{print $1}'
}

gh_page_url() {
  echo $(repo_user).$(github_domain)/$(repo_name)
}

################################################################################
# commands
################################################################################

if [[ $1 == "contributors" ]]; then
  if [[ $FORCE_ORIGIN -eq 1 ]]; then
    git web--browse http://$(origin_url)/graphs/contributors
  else
    git web--browse http://$(upstream_or_origin)/graphs/contributors
  fi

  exit 0
fi

if [[ $1 == "pages" ]]; then
  git web--browse http://$(gh_page_url)
  exit 0
fi

if [[ $1 == "issues" ]]; then
  if [[ $FORCE_ORIGIN -eq 1 ]]; then
    git web--browse http://$(origin_url)/issues
  else
    git web--browse http://$(upstream_or_origin)/issues
  fi

  exit 0
fi

if [[ $1 == "pull-request" ]]; then
  if [[ $(git branch --remotes | grep -P "origin/$CURRENT_BRANCH$") ]]; then
    # if we are on a branch and it exists on origin, issue pull request against it
    git web--browse http://$(origin_url)/pull/new/$CURRENT_BRANCH
  else
    # otherwise, issue a blank pull request
    git web--browse http://$(origin_url)/pull/new
  fi

  exit 0
fi

if [[ $1 == "stargazers" ]]; then
  if [[ $FORCE_ORIGIN -eq 1 ]]; then
    git web--browse http://$(origin_url)/stargazers
  else
    git web--browse http://$(upstream_or_origin)/stargazers
  fi

  exit 0
fi

if [[ $1 == "wiki" ]]; then
  if [[ $FORCE_ORIGIN -eq 1 ]]; then
    git web--browse http://$(origin_url)/wiki
  else
    git web--browse http://$(upstream_or_origin)/wiki
  fi

  exit 0
fi

# open
if [ ! -z "$CURRENT_BRANCH" ]; then
  git web--browse http://$(origin_url)/tree/$CURRENT_BRANCH
else
  git web--browse http://$(origin_url)
fi

exit 0
